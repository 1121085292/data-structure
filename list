#include <iostream>

#include <vector>

class  MyList {
  public:
    /* 构造方法 */
    MyList(){
        nums_ = new int[num_capacity_];
    }
    /* 析构方法 */
    ~MyList(){
        delete[] nums_;
    }
    /* 获取列表长度（即当前元素数量）*/
    int getSize(){
        return nums_size_;
    }
    /* 获取列表容量 */
    int getCapacity(){
        return num_capacity_;
    }
     /* 访问元素 */
    int getNumber(int index){
        if(index < 0 || index > getSize()){
            throw std::out_of_range("索引越界");    // 索引如果越界则抛出异常，下同
        }
        return nums_[index];
    }
    /* 更新元素 */
    void update(int num, int index){
        if(index < 0 || index > getSize()){
            throw std::out_of_range("索引越界");
        }
        nums_[index] = num;
    }
    /* 尾部添加元素 */
    void add(int num){
        // 元素数量超出容量时，触发扩容机制
        if(getSize() == num_capacity_){
            extendCapacity();
        }
        nums_[getSize()] = num;
        nums_size_++;
    }
    /* 中间插入元素 */
    void insert(int index, int num){
        if(index < 0 || index > getSize()){
            throw std::out_of_range("索引越界");
        }
        // 元素数量超出容量时，触发扩容机制
        if(getSize() == num_capacity_){
            extendCapacity();
        }
        for(int i = getSize() - 1; i >= index; i--){
            nums_[i + 1] = nums_[i];
        }
        nums_[index] = num;
        nums_size_++;
    }
    /* 删除元素 */
    int remove(int index){
        if(index < 0 || index > getSize()){
            throw std::out_of_range("索引越界");
        }
        int num = nums_[index];
        for(int i = index; i < getSize(); i++){
            nums_[i] = nums_[i+1];
        }
        nums_size_--;
        return num;
    }
    /* 列表扩容 */
    void extendCapacity(){
        int* tmp = nums_;
        int new_capacity = extend_ratio_ * num_capacity_;
        nums_ = new int[new_capacity];
        for(int i = 0; i < getSize(); i++){
            nums_[i] = tmp[i];
        }
        delete[] tmp;
        num_capacity_ = new_capacity;
    }
    /* 将列表转换为 Vector 用于打印 */
    std::vector<int> toVector(){
        std::vector<int> vec(getSize());
        for(int i = 0; i < getSize(); i++){
            vec[i] = nums_[i];
        }
        return vec;
    }
  private:
    int* nums_;                // 数组（存储列表元素）
    int num_capacity_ = 10;    // 列表容量
    int nums_size_ = 0;        // 列表长度（即当前元素数量）
    int extend_ratio_ = 2;     // 每次列表扩容的倍数
};



int main() {
    std::vector<int> list = {0, 1, 2, 3, 4, 5};
    list[1] = 5;
    list.push_back(2);
    list.insert(list.begin() + 3, 4);
    list.erase(list.begin() + 3);
    list.clear();
    for(const auto& l : list){
    }
    return 0;
}
